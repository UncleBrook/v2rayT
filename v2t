#!/usr/bin/python3
# -*- coding: UTF-8 -*-

import sys
import os
import requests
import base64
import json
import subprocess
import re
from threading import Thread
import _thread 
if sys.version > '3':
    from queue import Queue
    from queue import PriorityQueue
else:
    from Queue import Queue
    from Queue import PriorityQueue


tips_subscription = """Please choose what you want to continue:
    [ 1 ]  Resubscribe
    [ 2 ]  Refresh Config
    [ 3 ]  Continue
    
Please enter your selection number: """


tips_enter_url = """Please enter the subscription url: """
tips_error_url = """Error address: [{}], please check"""


tips_choose_node_or_ping = r"""
[Choose the node number you want to use ( eg. enter " 0 ~ {} " )] or [Test the speed of all nodes ( ping, eg. enter " p " )]："""


tips_choose_node = r"""
Choose the node number you want to use ( eg. enter " 0 ~ {} " )： """


tips_make_sure_node= """
Are you sure you want to use this node? [y/N] """


format_node = """    [ {:^4} ]  {}"""
format_ping = """    [ {:^4} ]  [  {:<6} ms  ]  {} """


v2rayT_path = os.path.expandvars('$HOME') + '/.v2rayT/'
v2rayT_sub_path = v2rayT_path + '.v2rayT.sub'
v2rayT_config_path = v2rayT_path + '.v2rayT.conf'

if not os.path.exists(v2rayT_path):
    os.mkdir(v2rayT_path, mode=0o777)

if not os.path.exists(v2rayT_sub_path):
    open(v2rayT_sub_path, 'w+')

if not os.path.exists(v2rayT_config_path):
    open(v2rayT_config_path, 'w+')


class Node():
    index = 0
    host = ""
    ps = ""


class PingNode():
    index = 0
    host = ""
    ps = ""
    response_time = 0

    def __eq__(self, other):
        return (self.response_time == other.response_time 
            and self.index == other.index
            and self.host == other.host
            and self.ps == other.ps)

    def __lt__(self, other):
        return self.response_time < other.response_time


class TPrint():
    lock = _thread.allocate_lock()
    def tprint(self, str):
        self.lock.acquire()
        sys.stdout.flush()
        print(str, end='')
        self.lock.release()



def addSubUrl():
    sub_url = input(tips_enter_url)
    sub_file = open(v2rayT_sub_path, 'w+')
    sub_file.write(sub_url)
    sub_file.close()
    return sub_url


def addConfigs(content):
    configs = str(base64.urlsafe_b64decode(content), encoding="utf-8")
    config_file = open(v2rayT_config_path, 'w+')
    config_file.write(configs)
    config_file.close()
    return configs


def readConfigs():
    config_file = open(v2rayT_config_path, 'r')
    configs = config_file.read().strip()
    config_file.close()
    return configs


v2rayT_sub_file = open(v2rayT_sub_path, 'r')
v2rayT_sub_url = v2rayT_sub_file.read().strip()
v2rayT_sub_file.close()
pingNodeQueue = PriorityQueue()


def loadSubContent():
    try:
        content = requests.get(v2rayT_sub_url).content
        missingPadding = 4 - len(content) % 4
        if missingPadding:
            content += b'=' * missingPadding
        return content
    except:
        print(tips_error_url.format(v2rayT_sub_url))
        os.remove(v2rayT_sub_path)
        os.remove(v2rayT_config_path)
        exit()

def pingReal(i, queue):
    while True:
        node = queue.get()
        host = node.host
        response_time = -1
        try:
            output = subprocess.check_output(['ping', '-c', '3', '-w', '10', '-q', host])
            output = output.decode('utf8')
            statistic = re.search(r'(\d+\.\d+/){3}\d+\.\d+', output).group(0)
            avg_time = re.findall(r'\d+\.\d+', statistic)[1]
            response_time = round(float(avg_time), 2)

        except subprocess.CalledProcessError:
            response_time = 99999

        pingNode = PingNode()
        pingNode.ps = node.ps
        pingNode.host = host
        pingNode.index = node.index
        pingNode.response_time = response_time
        pingNodeQueue.put(pingNode)

        queue.task_done()
        TPrint().tprint(":")

def ping(server_list):
    lenServer = len(server_list)
    nodeQueue = Queue(lenServer)
    num_threads = 10
    
    print("\nPinging, please wait ::", end='')

    for i in range(num_threads):
        thread = Thread(target=pingReal, name="Thread-{}".format(i), args=(i, nodeQueue))
        thread.setDaemon(True)
        thread.start()

    for i in range(lenServer):
        node = Node()
        node.host = server_list[i]['add']
        node.index = i
        node.ps = server_list[i]['ps']
        nodeQueue.put(node)

    nodeQueue.join()

    print("\n")
    for i in range(pingNodeQueue.qsize()):
        pingNode = pingNodeQueue.get()
        print(format_ping.format(str(pingNode.index), pingNode.response_time, pingNode.ps))
        pingNodeQueue.task_done()
    pingNodeQueue.join()

    # for i in range(len(server_list)):
    #     host = server_list[i]['add']
    #     response_time = -1
    #     try:
    #         output = subprocess.check_output(['ping', '-c', '3', '-w', '10', '-q', host])
    #         output = output.decode('utf8')
    #         statistic = re.search(r'(\d+\.\d+/){3}\d+\.\d+', output).group(0)
    #         avg_time = re.findall(r'\d+\.\d+', statistic)[1]
    #         response_time = float(avg_time)

    #     except subprocess.CalledProcessError:
    #         response_time = 99999999
    #     print(format_ping.format(str(i), server_list[i]['ps'], response_time))


def verifyNodeNumber(node_number):
    while True:
        try:
            node_number = int(node_number)
            return node_number
        except:
            node_number = int(input(tips_choose_node.format(len(server_list) - 1)))
            verifyNodeNumber(node_number)


v2rayT_configs = ''
if not v2rayT_sub_url:
    v2rayT_sub_url = addSubUrl()
    v2rayT_configs = addConfigs(loadSubContent())
else:
    while True:
        branch = int(input(tips_subscription))
        if branch == 1:
            v2rayT_sub_url = addSubUrl()
            v2rayT_configs = addConfigs(loadSubContent())
            break
        elif branch == 2:
            v2rayT_configs = addConfigs(loadSubContent())
            break
        elif branch == 3:
            v2rayT_configs = readConfigs()
            break


server_list = str.encode(v2rayT_configs).splitlines()
for i in range(len(server_list)):
    server_node = json.loads(base64.b64decode(
        bytes.decode(server_list[i]).replace('vmess://', '')))
    print(format_node.format(str(i), server_node['ps']))
    server_list[i] = server_node


while True:
    node_or_ping = input(tips_choose_node_or_ping.format((len(server_list) - 1)))
    if re.search('[pPyY]', node_or_ping):
        ping(server_list)
    
    checked_node_id = verifyNodeNumber(node_or_ping)
    subprocess.call(
        '\nping ' + server_list[checked_node_id]['add'] + ' -c 3 -w 10', shell=True)
    yes_or_no = input(tips_make_sure_node)
    if re.search('[yesYES]', yes_or_no):
        break
    elif re.search('[noNO]', yes_or_no):
        exit()


address = server_list[checked_node_id]['add']
port = int(server_list[checked_node_id]['port'])
alter_id = server_list[checked_node_id]['aid']
users_id = server_list[checked_node_id]['id']

v2ray_config = {
    "dns": {
        "servers": [
            "1.1.1.1"
        ]
    },
    "inbounds": [
        {
            "listen": "127.0.0.1",
            "port": 10809,
            "protocol": "socks",
            "settings": {
                "auth": "noauth",
                "udp": True,
                "userLevel": 8
            },
            "sniffing": {
                "destOverride": [
                    "http",
                    "tls"
                ],
                "enabled": True
            },
            "tag": "socks"
        },
        {
            "listen": "127.0.0.1",
            "port": 10808,
            "protocol": "http",
            "settings": {
                "userLevel": 8
            },
            "tag": "http"
        }
    ],
    "log": {
        "loglevel": "warning"
    },
    "outbounds": [
        {
            "mux": {
                "enabled": False
            },
            "protocol": "vmess",
            "settings": {
                "vnext": [
                    {
                        "address": address,
                        "port": port,
                        "users": [
                            {
                                "alterId": alter_id,
                                "id": users_id,
                                "level": 8,
                                "security": "auto"
                            }
                        ]
                    }
                ]
            },
            "streamSettings": {
                "network": "ws",
                "security": "",
                "wssettings": {
                    "connectionReuse": True,
                    "headers": {
                        "Host": ""
                    },
                    "path": "video"
                }
            },
            "tag": "proxy"
        },
        {
            "protocol": "freedom",
            "settings": {},
            "tag": "direct"
        },
        {
            "protocol": "blackhole",
            "settings": {
                "response": {
                    "type": "http"
                }
            },
            "tag": "block"
        }
    ],
    "policy": {
        "levels": {
            "8": {
                "connIdle": 300,
                "downlinkOnly": 1,
                "handshake": 4,
                "uplinkOnly": 1
            }
        },
        "system": {
            "statsInboundUplink": True,
            "statsInboundDownlink": True
        }
    },
    "routing": {
        "domainStrategy": "IPIfNonMatch",
        "rules": [
            {
                "domain": [
                    "domain:googleapis.cn"
                ],
                "outboundTag": "proxy",
                "type": "field"
            },
            {
                "ip": [
                    "geoip:private"
                ],
                "outboundTag": "direct",
                "type": "field"
            },
            {
                "ip": [
                    "geoip:cn"
                ],
                "outboundTag": "direct",
                "type": "field"
            },
            {
                "domain": [
                    "geosite:cn"
                ],
                "outboundTag": "direct",
                "type": "field"
            }
        ]
    },
    "stats": {}
}

json.dump(v2ray_config, open('/etc/v2ray/config.json', 'w'), indent=2)

print("\nRestart v2ray...")
subprocess.call('sudo systemctl restart v2ray.service', shell=True)
print('Well done, it\'s completed')

exit()
